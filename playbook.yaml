# Clone the wabue members area

- name: "Create temporary path"
  hosts: ansible_master
  tasks:
    - name: "Create temporary path"
      tempfile:
        state: "directory"
      register: "local_tempdir"

- name: "Dump database"
  tags:
    - "database"
  hosts: database_source
  tasks:
    - name: "Create temporary file"
      tempfile:
      register: "tempfile"
    - name: "Dump database"
      mysql_db:
        name: "{{ database_source_name }}"
        login_user: "{{ database_source_username }}"
        login_password: "{{ database_source_password }}"
        state: "dump"
        target: "{{ tempfile }}.sql"
    - name: "Download dump"
      fetch:
        src: "{{ tempfile }}"
        dest: "{{ hostvars['ansible_master']['local_tempdir'] }}/database.sql"
        flat: "yes"
    - name: "Cleanup"
      file:
        path: "{{ tempfile }}"
        state: "absent"

- name: "Fix database dump"
  tags:
    - "database"
    - "uncheckable"
  hosts: ansible_master
  tasks:
    - name: "Fix URL"
      replace:
        path: "{{ local_tempdir }}/database.sql"
        regexp: "{{ url_source }}"
        replace: "{{ url_destination }}"
    - name: "Fix paths"
      replace:
        path: "{{ local_tempdir }}/database.sql"
        regexp: "{{ data_folder_source }}"
        replace: "{{ data_folder_destination }}"

- name: "Restore dump"
  tags:
    - "database"
  hosts: database_destination
  tasks:
    - name: "Create temporary directory"
      tempfile:
        state: "directory"
      register: "remote_tempdir"
    - name: "Upload dump"
      tags:
        - "uncheckable"
      copy:
        src: "{{ hostvars['ansible_master']['local_tempdir'] }}/database.sql"
        dest: "{{ remote_tempdir }}"
    - name: "Import dump"
      mysql_db:
        name: "{{ database_destination_name }}"
        login_user: "{{ database_destination_username }}"
        login_password: "{{ database_destination_password }}"
        state: "import"
        target: "{{ remote_tempdir }}/database.sql"
    - name: "Cleanup"
      file:
        path: "{{ remote_tempdir }}"
        state: "absent"

- name: "Clean up locally"
  tags:
    - "database"
    - "uncheckable"
  hosts: ansible_master
  tasks:
    - name: "Remove database dump"
      file:
        path: "{{ local_tempdir }}/database.sql"
        state: "absent"

- name: "Transfer application from source"
  tags:
    - "application"
  hosts: application_source
  tasks:
    - name: "Create temporary file"
      tempfile:
      register: "application_archive"
    - name: "Archive application folder"
      archive:
        path: "{{ application_folder_source }}"
        dest: "{{ application_archive }}.tar.bz2"
        format: "bz2"
    - name: "Download application folder"
      fetch:
        src: "{{ application_archive }}.tar.bz2"
        dest: "{{ hostvars['ansible_master']['local_tempdir'] }}/application.tar.bz2"
        flat: "yes"
    - name: "Cleanup"
      file:
        path: "{{ application_archive }}.tar.bz2"
        state: "absent"

- name: "Transfer application to destination"
  tags:
    - "application"
  hosts: application_destination
  tasks:
    - name: "Create temporary path"
      tempfile:
      register: "remote_tempdir"
    - name: "Copy application archive"
      tags:
        - "uncheckable"
      copy:
        src: "{{ hostvars['ansible_master']['local_tempdir'] }}/application.tar.bz2"
        dest: "{{ remote_tempdir }}"
    - name: "Remove old application folder"
      file:
        path: "{{ application_folder_destination }}"
        state: "absent"
    - name: "Unarchive application archive"
      tags:
        - "uncheckable"
      unarchive:
        src: "{{ remote_tempdir }}/application.tar.bz2"
        dest: "{{ application_folder_destination }}"

- name: "Clean up locally"
  tags:
    - "application"
    - "uncheckable"
  hosts: ansible_master
  tasks:
    - name: "Remove application archive"
      file:
        path: "{{ local_tempdir }}/application.tar.bz2"
        state: "absent"

- name: "Fix application settings"
  tags:
    - "application"
  hosts: application_destination
  tasks:
    - name: "Add dbhost"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->dbhost = '{{ database_destination_host }}';"
    - name: "Add dbname"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->dbname = '{{ database_destination_name }}';"
    - name: "Add dbuser"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->dbuser = '{{ database_destination_username }}';"
    - name: "Add dbpass"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->dbpass = '{{ database_destination_password }}';"
    - name: "Add dataroot"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->dataroot = '{{ data_folder_destination }}';"

- name: "Transfer data folder from source"
  tags:
    - "data"
  hosts: application_source
  tasks:
    - name: "Create temporary file"
      tempfile:
      register: "data_archive"
    - name: "Archive data folder"
      archive:
        path: "{{ data_folder }}"
        dest: "{{ data_archive }}.tar.bz2"
        format: "bz2"
        exclude_path:
          - "system_cache"
          - "views_simplecache"
    - name: "Download data archive"
      tags:
        - "uncheckable"
      fetch:
        src: "{{ data_archive }}.tar.bz2"
        dest: "{{ hostvars['ansible_master']['local_tempdir'] }}/data.tar.bz2"
        flat: "yes"
    - name: "Cleanup"
      tags:
        - "uncheckable"
      file:
        path: "{{ data_archive }}.tar.bz2"
        state: "absent"

- name: "Transfer data folder to destination"
  tags:
    - "data"
  hosts: application_destination
  tasks:
    - name: "Create temporary path"
      tempfile:
      register: "remote_tempdir"
    - name: "Upload data archive"
      tags: 
        - "uncheckable"
      copy:
        src: "{{ hostvars['ansible_master']['local_tempdir'] }}/data.tar.bz2"
        dest: "{{ remote_tempdir }}"
    - name: "Remove old data folder"
      file:
        path: "{{ data_folder_destination }}"
        state: "absent"
    - name: "Unarchive data archive"
      tags:
        - "uncheckable"
      unarchive:
        src: "{{ remote_tempdir }}/data.tar.bz2"
        dest: "{{ data_folder_destination }}"

- name: "Clean up locally"
  tags:
    - "data"
    - "uncheckable"
  hosts: ansible_master
  tasks:
    - name: "Remove data archive"
      file:
        path: "{{ local_tempdir }}/data.tar.bz2"
        state: "absent"

- name: "Add file transport module"
  tags:
    - "integration"
  hosts: application_destination
  tasks:
    - name: "Create temporary folder"
      tempfile:
        state: "directory"
      register: "remote_tempdir"
    - name: "Download file transport module"
      get_url:
        url: "https://github.com/wabuehamm/elgg-plugin-filetransport/archive/master.zip"
        dest: "{{ remote_tempdir }}/master.zip"
    - name: "Unzip file transport module"
      unarchive:
        src: "{{ remote_tempdir }}/master.zip"
        dest: "{{ remote_tempdir }}"
    - name: "Move file transport module to module directory"
      synchronize:
        src: "{{ remote_tempdir }}/elgg-plugin-filetransport-master/"
        dest: "{{ application_folder_destination }}/mod/filetransport"
        recursive: "yes"
        delete: "yes"
    - name: "Clean up"
      file:
        path: "{{ remote_tempdir }}"
        state: "absent"

- name: "Run updates"
  tags:
    - "updates"
    - "updates_tasks"
  hosts: application_destination
  tasks:
    - name: "Include update tasks"
      include_tasks:
        file: "updates/{{ item }}.yaml"
      loop: "{{ update_tasks }}"

- name: "Run database updates"
  tags:
    - "updates"
    - "updates_sql"
  hosts: database_destination
  tasks:
    - include_tasks:
        file: "tasks/update_tasks_sql.yaml"
      loop: "{{ update_tasks_sql }}"

- name: "Clean up locally"
  hosts: ansible_master
  tasks:
    - name: "Remove local tempdir"
      file:
        path: "{{ local_tempdir }}"
        state: "absent"